# coding: utf-8
"""Riqu (Rest Interface for QUantum computing)

the cloud server with riqu interface.  # noqa: E501

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "qasm": "str",
        "transpiled_qasm": "str",
        "transpiler": "str",
        "shots": "int",
        "job_type": "str",
        "status": "str",
        "result": "str",
        "created": "datetime",
        "in_queue": "datetime",
        "out_queue": "datetime",
        "ended": "datetime",
        "remark": "str",
    }

    attribute_map = {
        "id": "id",
        "qasm": "qasm",
        "transpiled_qasm": "transpiled_qasm",
        "transpiler": "transpiler",
        "shots": "shots",
        "job_type": "job_type",
        "status": "status",
        "result": "result",
        "created": "created",
        "in_queue": "in_queue",
        "out_queue": "out_queue",
        "ended": "ended",
        "remark": "remark",
    }

    def __init__(
        self,
        id=None,
        qasm=None,
        transpiled_qasm=None,
        transpiler=None,
        shots=None,
        job_type=None,
        status=None,
        result=None,
        created=None,
        in_queue=None,
        out_queue=None,
        ended=None,
        remark=None,
    ):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._qasm = None
        self._transpiled_qasm = None
        self._transpiler = None
        self._shots = None
        self._job_type = None
        self._status = None
        self._result = None
        self._created = None
        self._in_queue = None
        self._out_queue = None
        self._ended = None
        self._remark = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if qasm is not None:
            self.qasm = qasm
        if transpiled_qasm is not None:
            self.transpiled_qasm = transpiled_qasm
        if transpiler is not None:
            self.transpiler = transpiler
        if shots is not None:
            self.shots = shots
        if job_type is not None:
            self.job_type = job_type
        if status is not None:
            self.status = status
        if result is not None:
            self.result = result
        if created is not None:
            self.created = created
        if in_queue is not None:
            self.in_queue = in_queue
        if out_queue is not None:
            self.out_queue = out_queue
        if ended is not None:
            self.ended = ended
        if remark is not None:
            self.remark = remark

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501.

        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def qasm(self):
        """Gets the qasm of this Job.  # noqa: E501.

        :return: The qasm of this Job.  # noqa: E501
        :rtype: str
        """
        return self._qasm

    @qasm.setter
    def qasm(self, qasm):
        """Sets the qasm of this Job.

        :param qasm: The qasm of this Job.  # noqa: E501
        :type: str
        """

        self._qasm = qasm

    @property
    def transpiled_qasm(self):
        """Gets the transpiled_qasm of this Job.  # noqa: E501.

        :return: The transpiled_qasm of this Job.  # noqa: E501
        :rtype: str
        """
        return self._transpiled_qasm

    @transpiled_qasm.setter
    def transpiled_qasm(self, transpiled_qasm):
        """Sets the transpiled_qasm of this Job.

        :param transpiled_qasm: The transpiled_qasm of this Job. #
            noqa: E501
        :type: str
        """

        self._transpiled_qasm = transpiled_qasm

    @property
    def transpiler(self):
        """Gets the transpiler of this Job.  # noqa: E501.

        :return: The transpiler of this Job.  # noqa: E501
        :rtype: str
        """
        return self._transpiler

    @transpiler.setter
    def transpiler(self, transpiler):
        """Sets the transpiler of this Job.

        :param transpiler: The transpiler of this Job.  # noqa: E501
        :type: str
        """

        self._transpiler = transpiler

    @property
    def shots(self):
        """Gets the shots of this Job.  # noqa: E501.

        :return: The shots of this Job.  # noqa: E501
        :rtype: int
        """
        return self._shots

    @shots.setter
    def shots(self, shots):
        """Sets the shots of this Job.

        :param shots: The shots of this Job.  # noqa: E501
        :type: int
        """

        self._shots = shots

    @property
    def job_type(self):
        """Gets the job_type of this Job.  # noqa: E501.

        :return: The job_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this Job.

        :param job_type: The job_type of this Job.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501.

        :return: The status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.

        :param status: The status of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "created",
            "queued",
            "preprocessing",
            "processing",
            "success",
            "failure",
            "cancelled",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def result(self):
        """Gets the result of this Job.  # noqa: E501.

        :return: The result of this Job.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Job.

        :param result: The result of this Job.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def created(self):
        """Gets the created of this Job.  # noqa: E501.

        :return: The created of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Job.

        :param created: The created of this Job.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def in_queue(self):
        """Gets the in_queue of this Job.  # noqa: E501.

        :return: The in_queue of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._in_queue

    @in_queue.setter
    def in_queue(self, in_queue):
        """Sets the in_queue of this Job.

        :param in_queue: The in_queue of this Job.  # noqa: E501
        :type: datetime
        """

        self._in_queue = in_queue

    @property
    def out_queue(self):
        """Gets the out_queue of this Job.  # noqa: E501.

        :return: The out_queue of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._out_queue

    @out_queue.setter
    def out_queue(self, out_queue):
        """Sets the out_queue of this Job.

        :param out_queue: The out_queue of this Job.  # noqa: E501
        :type: datetime
        """

        self._out_queue = out_queue

    @property
    def ended(self):
        """Gets the ended of this Job.  # noqa: E501.

        :return: The ended of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._ended

    @ended.setter
    def ended(self, ended):
        """Sets the ended of this Job.

        :param ended: The ended of this Job.  # noqa: E501
        :type: datetime
        """

        self._ended = ended

    @property
    def remark(self):
        """Gets the remark of this Job.  # noqa: E501.

        :return: The remark of this Job.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this Job.

        :param remark: The remark of this Job.  # noqa: E501
        :type: str
        """

        self._remark = remark

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other
